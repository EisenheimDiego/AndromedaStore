name: C18780

on:
  push:
    branches: [ "C18780" ]
  pull_request:
    branches: [ "C18780" ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        env:
          MYSQL_ROOT_PASSWORD: 123456

    steps:
    - uses: actions/checkout@v4

    - name: Wait for MySQL to be healthy
      run: |
        echo "Waiting for MySQL to be healthy..."
        while ! docker inspect --format '{{json .State.Health.Status}}' $(docker ps -q --filter ancestor=mysql:latest) | grep -q '"healthy"'; do
          echo "Waiting for MySQL..."
          sleep 5
        done
        echo "MySQL is healthy."

    - name: Create sys database and tables
      run: |
        docker exec $(docker ps -q --filter ancestor=mysql:latest) \
        mysql -u root -p123456 -e "
        CREATE DATABASE IF NOT EXISTS sys;
        USE sys;
        "

    - name: Insert initial data into Category and Product tables
      run: |
        docker exec $(docker ps -q --filter ancestor=mysql:latest) \
        mysql -u root -p123456 -e "
        USE sys;
        INSERT INTO Category (uuid, name) VALUES ('4a8c74b4-cf8e-4fbf-81a2-3d11e1e37d18', 'Categor√≠a 1');
        INSERT INTO Product (uuid, name, imageUrl, price, description, category) VALUES ('1547f3c3-54e6-4e7d-bf8f-f26daa15c843', 'Producto 1', 'example', 1, 'description', '4a8c74b4-cf8e-4fbf-81a2-3d11e1e37d18');
        "

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: |
        cd C18780/backend
        dotnet restore

    - name: Build
      run: |
        cd C18780/backend
        dotnet build --no-restore

    - name: Test
      run: |
        cd C18780/backend
        dotnet test --no-build --verbosity normal
